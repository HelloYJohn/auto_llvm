// Generated by llvm2cpp - DO NOT MODIFY!

#include <llvm/Pass.h>
#include <llvm/PassManager.h>
#include <llvm/ADT/SmallVector.h>
#include <llvm/Analysis/Verifier.h>
#include <llvm/Assembly/PrintModulePass.h>
#include <llvm/IR/BasicBlock.h>
#include <llvm/IR/CallingConv.h>
#include <llvm/IR/Constants.h>
#include <llvm/IR/DerivedTypes.h>
#include <llvm/IR/Function.h>
#include <llvm/IR/GlobalVariable.h>
#include <llvm/IR/InlineAsm.h>
#include <llvm/IR/Instructions.h>
#include <llvm/IR/LLVMContext.h>
#include <llvm/IR/Module.h>
#include <llvm/Support/FormattedStream.h>
#include <llvm/Support/MathExtras.h>
#include <algorithm>
using namespace llvm;

Module* makeLLVMModule();

int main(int argc, char**argv) {
  Module* Mod = makeLLVMModule();
  verifyModule(*Mod, PrintMessageAction);
  PassManager PM;
  PM.add(createPrintModulePass(&outs()));
  PM.run(*Mod);
  return 0;
}


Module* makeLLVMModule() {
 // Module Construction
 Module* mod = new Module("invoke_bc.bc", getGlobalContext());
 mod->setDataLayout("e-p:64:64:64-i1:8:8-i8:8:8-i16:16:16-i32:32:32-i64:64:64-f32:32:32-f64:64:64-v64:64:64-v128:128:128-a0:0:64-s0:64:64-f80:128:128-n8:16:32:64-S128");
 mod->setTargetTriple("x86_64-unknown-linux-gnu");
 
 // Type Definitions
 std::vector<Type*>FuncTy_0_args;
 StructType *StructTy_struct_FuncType = mod->getTypeByName("struct.FuncType");
 if (!StructTy_struct_FuncType) {
 StructTy_struct_FuncType = StructType::create(mod->getContext(), "struct.FuncType");
 }
 std::vector<Type*>StructTy_struct_FuncType_fields;
 StructType *StructTy_class_std__basic_string = mod->getTypeByName("class.std::basic_string");
 if (!StructTy_class_std__basic_string) {
 StructTy_class_std__basic_string = StructType::create(mod->getContext(), "class.std::basic_string");
 }
 std::vector<Type*>StructTy_class_std__basic_string_fields;
 StructType *StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider = mod->getTypeByName("struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider");
 if (!StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider = StructType::create(mod->getContext(), "struct.std::basic_string<char, std::char_traits<char>, std::allocator<char> >::_Alloc_hider");
 }
 std::vector<Type*>StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider_fields;
 PointerType* PointerTy_2 = PointerType::get(IntegerType::get(mod->getContext(), 8), 0);
 
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider_fields.push_back(PointerTy_2);
 if (StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider->isOpaque()) {
 StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider->setBody(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider_fields, /*isPacked=*/false);
 }
 
 StructTy_class_std__basic_string_fields.push_back(StructTy_struct_std__basic_string_char__std__char_traits_char___std__allocator_char______Alloc_hider);
 if (StructTy_class_std__basic_string->isOpaque()) {
 StructTy_class_std__basic_string->setBody(StructTy_class_std__basic_string_fields, /*isPacked=*/false);
 }
 
 StructTy_struct_FuncType_fields.push_back(StructTy_class_std__basic_string);
 StructType *StructTy_class_std__vector = mod->getTypeByName("class.std::vector");
 if (!StructTy_class_std__vector) {
 StructTy_class_std__vector = StructType::create(mod->getContext(), "class.std::vector");
 }
 std::vector<Type*>StructTy_class_std__vector_fields;
 StructType *StructTy_struct_std___Vector_base = mod->getTypeByName("struct.std::_Vector_base");
 if (!StructTy_struct_std___Vector_base) {
 StructTy_struct_std___Vector_base = StructType::create(mod->getContext(), "struct.std::_Vector_base");
 }
 std::vector<Type*>StructTy_struct_std___Vector_base_fields;
 StructType *StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl = mod->getTypeByName("struct.std::_Vector_base<PFDSType *, std::allocator<PFDSType *> >::_Vector_impl");
 if (!StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl) {
 StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl = StructType::create(mod->getContext(), "struct.std::_Vector_base<PFDSType *, std::allocator<PFDSType *> >::_Vector_impl");
 }
 std::vector<Type*>StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl_fields;
 StructType *StructTy_struct_PFDSType = mod->getTypeByName("struct.PFDSType");
 if (!StructTy_struct_PFDSType) {
 StructTy_struct_PFDSType = StructType::create(mod->getContext(), "struct.PFDSType");
 }
 std::vector<Type*>StructTy_struct_PFDSType_fields;
 StructTy_struct_PFDSType_fields.push_back(StructTy_class_std__basic_string);
 StructTy_struct_PFDSType_fields.push_back(PointerTy_2);
 if (StructTy_struct_PFDSType->isOpaque()) {
 StructTy_struct_PFDSType->setBody(StructTy_struct_PFDSType_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_4 = PointerType::get(StructTy_struct_PFDSType, 0);
 
 PointerType* PointerTy_3 = PointerType::get(PointerTy_4, 0);
 
 StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl_fields.push_back(PointerTy_3);
 StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl_fields.push_back(PointerTy_3);
 StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl_fields.push_back(PointerTy_3);
 if (StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl->isOpaque()) {
 StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl->setBody(StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl_fields, /*isPacked=*/false);
 }
 
 StructTy_struct_std___Vector_base_fields.push_back(StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl);
 if (StructTy_struct_std___Vector_base->isOpaque()) {
 StructTy_struct_std___Vector_base->setBody(StructTy_struct_std___Vector_base_fields, /*isPacked=*/false);
 }
 
 StructTy_class_std__vector_fields.push_back(StructTy_struct_std___Vector_base);
 if (StructTy_class_std__vector->isOpaque()) {
 StructTy_class_std__vector->setBody(StructTy_class_std__vector_fields, /*isPacked=*/false);
 }
 
 StructTy_struct_FuncType_fields.push_back(StructTy_class_std__vector);
 StructTy_struct_FuncType_fields.push_back(PointerTy_4);
 if (StructTy_struct_FuncType->isOpaque()) {
 StructTy_struct_FuncType->setBody(StructTy_struct_FuncType_fields, /*isPacked=*/false);
 }
 
 PointerType* PointerTy_1 = PointerType::get(StructTy_struct_FuncType, 0);
 
 FuncTy_0_args.push_back(PointerTy_1);
 FuncTy_0_args.push_back(PointerTy_2);
 FunctionType* FuncTy_0 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 1),
  /*Params=*/FuncTy_0_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_5 = PointerType::get(PointerTy_1, 0);
 
 PointerType* PointerTy_6 = PointerType::get(PointerTy_2, 0);
 
 PointerType* PointerTy_8 = PointerType::get(StructTy_class_std__vector, 0);
 
 PointerType* PointerTy_7 = PointerType::get(PointerTy_8, 0);
 
 PointerType* PointerTy_9 = PointerType::get(IntegerType::get(mod->getContext(), 32), 0);
 
 std::vector<Type*>FuncTy_11_args;
 FuncTy_11_args.push_back(PointerTy_8);
 FuncTy_11_args.push_back(IntegerType::get(mod->getContext(), 64));
 FunctionType* FuncTy_11 = FunctionType::get(
  /*Result=*/PointerTy_3,
  /*Params=*/FuncTy_11_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_10 = PointerType::get(FuncTy_11, 0);
 
 std::vector<Type*>FuncTy_13_args;
 FuncTy_13_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_13_args.push_back(IntegerType::get(mod->getContext(), 32));
 FuncTy_13_args.push_back(PointerTy_2);
 FunctionType* FuncTy_13 = FunctionType::get(
  /*Result=*/IntegerType::get(mod->getContext(), 32),
  /*Params=*/FuncTy_13_args,
  /*isVarArg=*/false);
 
 PointerType* PointerTy_12 = PointerType::get(FuncTy_13, 0);
 
 PointerType* PointerTy_14 = PointerType::get(IntegerType::get(mod->getContext(), 64), 0);
 
 PointerType* PointerTy_15 = PointerType::get(StructTy_struct_std___Vector_base, 0);
 
 PointerType* PointerTy_16 = PointerType::get(StructTy_struct_std___Vector_base_PFDSType____std__allocator_PFDSType________Vector_impl, 0);
 
 PointerType* PointerTy_17 = PointerType::get(PointerTy_3, 0);
 
 
 // Function Declarations
 
 Function* func_invoke = mod->getFunction("invoke");
 if (!func_invoke) {
 func_invoke = Function::Create(
  /*Type=*/FuncTy_0,
  /*Linkage=*/GlobalValue::ExternalLinkage,
  /*Name=*/"invoke", mod); 
 func_invoke->setCallingConv(CallingConv::C);
 }
 AttributeSet func_invoke_PAL;
 {
  SmallVector<AttributeSet, 4> Attrs;
  AttributeSet PAS;
   {
    AttrBuilder B;
    B.addAttribute(Attribute::ZExt);
    PAS = AttributeSet::get(mod->getContext(), 0U, B);
   }
  
  Attrs.push_back(PAS);
  {
   AttrBuilder B;
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_invoke_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_invoke->setAttributes(func_invoke_PAL);

Function* func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm = mod->getFunction("_ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm");
if (!func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm) {
func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm = Function::Create(
 /*Type=*/FuncTy_11,
 /*Linkage=*/GlobalValue::LinkOnceODRLinkage ,
 /*Name=*/"_ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm", mod); 
func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm->setCallingConv(CallingConv::C);
func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm->setAlignment(2);
}
AttributeSet func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   B.addAttribute(Attribute::NoUnwind);
   B.addAttribute(Attribute::UWTable);
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm->setAttributes(func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm_PAL);

Function* func_add = mod->getFunction("add");
if (!func_add) {
func_add = Function::Create(
 /*Type=*/FuncTy_13,
 /*Linkage=*/GlobalValue::ExternalLinkage,
 /*Name=*/"add", mod); // (external, no body)
func_add->setCallingConv(CallingConv::C);
}
AttributeSet func_add_PAL;
{
 SmallVector<AttributeSet, 4> Attrs;
 AttributeSet PAS;
  {
   AttrBuilder B;
   PAS = AttributeSet::get(mod->getContext(), ~0U, B);
  }
 
 Attrs.push_back(PAS);
 func_add_PAL = AttributeSet::get(mod->getContext(), Attrs);
 
}
func_add->setAttributes(func_add_PAL);

// Global Variable Declarations


// Constant Definitions
ConstantInt* const_int32_18 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("1"), 10));
ConstantInt* const_int32_19 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("0"), 10));
ConstantInt* const_int32_20 = ConstantInt::get(mod->getContext(), APInt(32, StringRef("2"), 10));
ConstantInt* const_int64_21 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("0"), 10));
ConstantInt* const_int64_22 = ConstantInt::get(mod->getContext(), APInt(64, StringRef("1"), 10));
ConstantInt* const_int1_23 = ConstantInt::get(mod->getContext(), APInt(1, StringRef("-1"), 10));

// Global Variable Definitions

// Function Definitions

// Function: invoke (func_invoke)
{
 Function::arg_iterator args = func_invoke->arg_begin();
 Value* ptr_funcT = args++;
 ptr_funcT->setName("funcT");
 Value* ptr_dl_handle = args++;
 ptr_dl_handle->setName("dl_handle");
 
 BasicBlock* label_entry = BasicBlock::Create(mod->getContext(), "entry",func_invoke,0);
 
 // Block entry (label_entry)
 AllocaInst* ptr_funcT_addr = new AllocaInst(PointerTy_1, "funcT.addr", label_entry);
 ptr_funcT_addr->setAlignment(8);
 AllocaInst* ptr_dl_handle_addr = new AllocaInst(PointerTy_2, "dl_handle.addr", label_entry);
 ptr_dl_handle_addr->setAlignment(8);
 AllocaInst* ptr_paraList = new AllocaInst(PointerTy_8, "paraList", label_entry);
 ptr_paraList->setAlignment(8);
 AllocaInst* ptr_ret = new AllocaInst(PointerTy_4, "ret", label_entry);
 ptr_ret->setAlignment(8);
 AllocaInst* ptr_a = new AllocaInst(IntegerType::get(mod->getContext(), 32), "a", label_entry);
 ptr_a->setAlignment(4);
 AllocaInst* ptr_b = new AllocaInst(IntegerType::get(mod->getContext(), 32), "b", label_entry);
 ptr_b->setAlignment(4);
 StoreInst* void_24 = new StoreInst(ptr_funcT, ptr_funcT_addr, false, label_entry);
 void_24->setAlignment(8);
 StoreInst* void_25 = new StoreInst(ptr_dl_handle, ptr_dl_handle_addr, false, label_entry);
 void_25->setAlignment(8);
 LoadInst* ptr_26 = new LoadInst(ptr_funcT_addr, "", false, label_entry);
 ptr_26->setAlignment(8);
 std::vector<Value*> ptr_paraList1_indices;
 ptr_paraList1_indices.push_back(const_int32_19);
 ptr_paraList1_indices.push_back(const_int32_18);
 Instruction* ptr_paraList1 = GetElementPtrInst::Create(ptr_26, ptr_paraList1_indices, "paraList1", label_entry);
 StoreInst* void_27 = new StoreInst(ptr_paraList1, ptr_paraList, false, label_entry);
 void_27->setAlignment(8);
 LoadInst* ptr_28 = new LoadInst(ptr_funcT_addr, "", false, label_entry);
 ptr_28->setAlignment(8);
 std::vector<Value*> ptr_ret2_indices;
 ptr_ret2_indices.push_back(const_int32_19);
 ptr_ret2_indices.push_back(const_int32_20);
 Instruction* ptr_ret2 = GetElementPtrInst::Create(ptr_28, ptr_ret2_indices, "ret2", label_entry);
 LoadInst* ptr_29 = new LoadInst(ptr_ret2, "", false, label_entry);
 ptr_29->setAlignment(8);
 StoreInst* void_30 = new StoreInst(ptr_29, ptr_ret, false, label_entry);
 void_30->setAlignment(8);
 LoadInst* ptr_31 = new LoadInst(ptr_paraList, "", false, label_entry);
 ptr_31->setAlignment(8);
 std::vector<Value*> ptr_call_params;
 ptr_call_params.push_back(ptr_31);
 ptr_call_params.push_back(const_int64_21);
 CallInst* ptr_call = CallInst::Create(func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm, ptr_call_params, "call", label_entry);
 ptr_call->setCallingConv(CallingConv::C);
 ptr_call->setTailCall(false);
 AttributeSet ptr_call_PAL;
 ptr_call->setAttributes(ptr_call_PAL);
 
 LoadInst* ptr_32 = new LoadInst(ptr_call, "", false, label_entry);
 std::vector<Value*> ptr_pfdsValue_indices;
 ptr_pfdsValue_indices.push_back(const_int32_19);
 ptr_pfdsValue_indices.push_back(const_int32_18);
 Instruction* ptr_pfdsValue = GetElementPtrInst::Create(ptr_32, ptr_pfdsValue_indices, "pfdsValue", label_entry);
 LoadInst* ptr_33 = new LoadInst(ptr_pfdsValue, "", false, label_entry);
 ptr_33->setAlignment(8);
 CastInst* ptr_34 = new BitCastInst(ptr_33, PointerTy_9, "", label_entry);
 LoadInst* int32_35 = new LoadInst(ptr_34, "", false, label_entry);
 int32_35->setAlignment(4);
 StoreInst* void_36 = new StoreInst(int32_35, ptr_a, false, label_entry);
 void_36->setAlignment(4);
 LoadInst* ptr_37 = new LoadInst(ptr_paraList, "", false, label_entry);
 ptr_37->setAlignment(8);
 std::vector<Value*> ptr_call3_params;
 ptr_call3_params.push_back(ptr_37);
 ptr_call3_params.push_back(const_int64_22);
 CallInst* ptr_call3 = CallInst::Create(func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm, ptr_call3_params, "call3", label_entry);
 ptr_call3->setCallingConv(CallingConv::C);
 ptr_call3->setTailCall(false);
 AttributeSet ptr_call3_PAL;
 ptr_call3->setAttributes(ptr_call3_PAL);
 
 LoadInst* ptr_38 = new LoadInst(ptr_call3, "", false, label_entry);
 std::vector<Value*> ptr_pfdsValue4_indices;
 ptr_pfdsValue4_indices.push_back(const_int32_19);
 ptr_pfdsValue4_indices.push_back(const_int32_18);
 Instruction* ptr_pfdsValue4 = GetElementPtrInst::Create(ptr_38, ptr_pfdsValue4_indices, "pfdsValue4", label_entry);
 LoadInst* ptr_39 = new LoadInst(ptr_pfdsValue4, "", false, label_entry);
 ptr_39->setAlignment(8);
 CastInst* ptr_40 = new BitCastInst(ptr_39, PointerTy_9, "", label_entry);
 LoadInst* int32_41 = new LoadInst(ptr_40, "", false, label_entry);
 int32_41->setAlignment(4);
 StoreInst* void_42 = new StoreInst(int32_41, ptr_b, false, label_entry);
 void_42->setAlignment(4);
 LoadInst* int32_43 = new LoadInst(ptr_a, "", false, label_entry);
 int32_43->setAlignment(4);
 LoadInst* int32_44 = new LoadInst(ptr_b, "", false, label_entry);
 int32_44->setAlignment(4);
 LoadInst* ptr_45 = new LoadInst(ptr_dl_handle_addr, "", false, label_entry);
 ptr_45->setAlignment(8);
 std::vector<Value*> int32_call5_params;
 int32_call5_params.push_back(int32_43);
 int32_call5_params.push_back(int32_44);
 int32_call5_params.push_back(ptr_45);
 CallInst* int32_call5 = CallInst::Create(func_add, int32_call5_params, "call5", label_entry);
 int32_call5->setCallingConv(CallingConv::C);
 int32_call5->setTailCall(false);
 AttributeSet int32_call5_PAL;
 int32_call5->setAttributes(int32_call5_PAL);
 
 LoadInst* ptr_46 = new LoadInst(ptr_ret, "", false, label_entry);
 ptr_46->setAlignment(8);
 std::vector<Value*> ptr_pfdsValue6_indices;
 ptr_pfdsValue6_indices.push_back(const_int32_19);
 ptr_pfdsValue6_indices.push_back(const_int32_18);
 Instruction* ptr_pfdsValue6 = GetElementPtrInst::Create(ptr_46, ptr_pfdsValue6_indices, "pfdsValue6", label_entry);
 LoadInst* ptr_47 = new LoadInst(ptr_pfdsValue6, "", false, label_entry);
 ptr_47->setAlignment(8);
 CastInst* ptr_48 = new BitCastInst(ptr_47, PointerTy_9, "", label_entry);
 StoreInst* void_49 = new StoreInst(int32_call5, ptr_48, false, label_entry);
 void_49->setAlignment(4);
 ReturnInst::Create(mod->getContext(), const_int1_23, label_entry);
 
}

// Function: _ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm (func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm)
{
 Function::arg_iterator args = func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm->arg_begin();
 Value* ptr_this = args++;
 ptr_this->setName("this");
 Value* int64___n = args++;
 int64___n->setName("__n");
 
 BasicBlock* label_entry_51 = BasicBlock::Create(mod->getContext(), "entry",func__ZNSt6vectorIP8PFDSTypeSaIS1_EEixEm,0);
 
 // Block entry (label_entry_51)
 AllocaInst* ptr_this_addr = new AllocaInst(PointerTy_8, "this.addr", label_entry_51);
 ptr_this_addr->setAlignment(8);
 AllocaInst* ptr___n_addr = new AllocaInst(IntegerType::get(mod->getContext(), 64), "__n.addr", label_entry_51);
 ptr___n_addr->setAlignment(8);
 StoreInst* void_52 = new StoreInst(ptr_this, ptr_this_addr, false, label_entry_51);
 void_52->setAlignment(8);
 StoreInst* void_53 = new StoreInst(int64___n, ptr___n_addr, false, label_entry_51);
 void_53->setAlignment(8);
 LoadInst* ptr_this1 = new LoadInst(ptr_this_addr, "this1", false, label_entry_51);
 CastInst* ptr_54 = new BitCastInst(ptr_this1, PointerTy_15, "", label_entry_51);
 std::vector<Value*> ptr__M_impl_indices;
 ptr__M_impl_indices.push_back(const_int32_19);
 ptr__M_impl_indices.push_back(const_int32_19);
 Instruction* ptr__M_impl = GetElementPtrInst::Create(ptr_54, ptr__M_impl_indices, "_M_impl", label_entry_51);
 std::vector<Value*> ptr__M_start_indices;
 ptr__M_start_indices.push_back(const_int32_19);
 ptr__M_start_indices.push_back(const_int32_19);
 Instruction* ptr__M_start = GetElementPtrInst::Create(ptr__M_impl, ptr__M_start_indices, "_M_start", label_entry_51);
 LoadInst* ptr_55 = new LoadInst(ptr__M_start, "", false, label_entry_51);
 ptr_55->setAlignment(8);
 LoadInst* int64_56 = new LoadInst(ptr___n_addr, "", false, label_entry_51);
 int64_56->setAlignment(8);
 GetElementPtrInst* ptr_add_ptr = GetElementPtrInst::Create(ptr_55, int64_56, "add.ptr", label_entry_51);
 ReturnInst::Create(mod->getContext(), ptr_add_ptr, label_entry_51);
 
}

return mod;
}
